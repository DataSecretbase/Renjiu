# Generated by Django 2.1 on 2018-08-09 22:07

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='WechatUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('cookie', models.CharField(default='', max_length=100, verbose_name='用户认证标识')),
                ('name', models.CharField(max_length=40, verbose_name='昵称')),
                ('openid', models.CharField(max_length=255, verbose_name='OpenId')),
                ('union_id', models.CharField(max_length=255, verbose_name='UnionId')),
                ('gender', models.SmallIntegerField(default=0, verbose_name='gender')),
                ('language', models.CharField(max_length=40, verbose_name='语言')),
                ('register_type', models.SmallIntegerField(default=0, verbose_name='注册来源')),
                ('phone', models.CharField(max_length=50, verbose_name='手机号码')),
                ('country', models.IntegerField(default=0, verbose_name='国家')),
                ('province', models.IntegerField(default=0, verbose_name='省份')),
                ('city', models.IntegerField(default=0, verbose_name='城市')),
                ('avatar', models.ImageField(upload_to='upload', verbose_name='头像')),
                ('register_ip', models.CharField(max_length=80, verbose_name='注册IP')),
                ('ip', models.CharField(max_length=80, verbose_name='登陆IP')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'WechatUser',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('province_id', models.IntegerField(default=0, verbose_name='省')),
                ('city_id', models.IntegerField(default=0, verbose_name='城市')),
                ('district_id', models.IntegerField(default=0, verbose_name='区')),
                ('linkMan', models.CharField(max_length=15, verbose_name='联系人')),
                ('address', models.CharField(max_length=100, verbose_name='详细地址')),
                ('mobile', models.CharField(max_length=40, verbose_name='电话号码')),
                ('code', models.CharField(max_length=20, verbose_name='邮政编码')),
                ('isDefault', models.BooleanField(verbose_name='默认地址')),
                ('owner_type', models.SmallIntegerField(verbose_name='被标注地址的类型eg:微信用户,订单')),
                ('owner_id', models.IntegerField(verbose_name='微信用户、订单的id')),
            ],
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_pic', models.ImageField(upload_to='img', verbose_name='附件图片')),
                ('owner_id', models.IntegerField(default=0)),
                ('owner_type', models.CharField(choices=[('DriverSchool', 'DriverSchool'), ('WechatUser', 'WechatUser'), ('Goods', 'Goods'), ('Unkown', 'Unkown')], default='Unkown', max_length=20)),
            ],
            options={
                'db_table': 'Attachment',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='名称')),
                ('category_type', models.CharField(max_length=30, verbose_name='类型')),
                ('key', models.IntegerField(verbose_name='编号')),
                ('level', models.SmallIntegerField(verbose_name='分类级别')),
                ('is_use', models.BooleanField(default=True, verbose_name='是否启用')),
                ('sort', models.IntegerField(verbose_name='排序')),
            ],
            options={
                'db_table': 'Category',
            },
        ),
        migrations.CreateModel(
            name='Coupons',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='优惠券名称')),
                ('moneyMin', models.FloatField(verbose_name='优惠券金额')),
                ('moneyHreshold', models.FloatField(verbose_name='满 减 最低额度')),
                ('dateEndType', models.SmallIntegerField(choices=[(0, '截止某日前有效'), (1, '领取后有效时间倒计')], verbose_name='优惠券有效期类型')),
                ('date', models.SmallIntegerField(verbose_name='优惠券有效期倒计时(天)')),
                ('is_activate', models.BooleanField(verbose_name='优惠券是否有效')),
            ],
        ),
        migrations.CreateModel(
            name='DeliverWizard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tracking_number', models.CharField(max_length=200, verbose_name='运单号')),
                ('status', models.CharField(max_length=20, verbose_name='状态')),
            ],
            options={
                'db_table': 'DeliverWizard',
            },
        ),
        migrations.CreateModel(
            name='DriverSchool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('province_id', models.IntegerField(default=0, verbose_name='省')),
                ('city_id', models.IntegerField(default=0, verbose_name='城市')),
                ('district_id', models.IntegerField(default=0, verbose_name='区')),
                ('name', models.CharField(max_length=30, verbose_name='店铺名称')),
                ('address', models.CharField(blank=True, max_length=100, null=True, verbose_name='地址')),
                ('phone', models.CharField(blank=True, max_length=50, null=True, verbose_name='联系电话')),
                ('introduce', models.TextField(verbose_name='驾校介绍')),
                ('characteristic', models.TextField(verbose_name='驾校特色')),
                ('sort', models.IntegerField(verbose_name='排序')),
                ('activity', models.CharField(max_length=255, verbose_name='打折优惠信息')),
                ('latitude', models.FloatField(verbose_name='纬度')),
                ('longitude', models.FloatField(verbose_name='经度')),
                ('number_good_reputation', models.IntegerField(verbose_name='好评数')),
                ('number_order', models.IntegerField(verbose_name='订单数')),
            ],
            options={
                'db_table': 'DriverSchool',
            },
        ),
        migrations.CreateModel(
            name='goods',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('barCode', models.CharField(default='', max_length=100, verbose_name='条形码')),
                ('characteristic', models.CharField(default='', max_length=100, verbose_name='描述')),
                ('commission', models.FloatField(verbose_name='佣金')),
                ('commission_type', models.IntegerField(default=0, verbose_name='佣金类型')),
                ('dateAdd', models.DateTimeField(auto_now_add=True, verbose_name='上架时间')),
                ('dateStart', models.DateTimeField(auto_now_add=True, verbose_name='上架时间')),
                ('dateUpdate', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('logistics_id', models.IntegerField(default=0, verbose_name='物流id')),
                ('minPrice', models.FloatField(verbose_name='最小价格')),
                ('minScore', models.SmallIntegerField(default=0, verbose_name='最小评分')),
                ('name', models.CharField(max_length=60, verbose_name='名称')),
                ('numberFav', models.IntegerField(default=0)),
                ('numberGoodReputation', models.IntegerField(default=0)),
                ('numberOrders', models.IntegerField(default=0, verbose_name='已售数量')),
                ('originalPrice', models.FloatField(verbose_name='原价')),
                ('paixu', models.IntegerField(default=0)),
                ('pingtuan', models.BooleanField(default=False, verbose_name='拼团')),
                ('pingtuanPrice', models.FloatField(default=0.0, verbose_name='拼团价格')),
                ('recommendStatus', models.SmallIntegerField(default=0, verbose_name='推荐状态')),
                ('recommendStatusStr', models.CharField(max_length=10, verbose_name='推荐状态(文字)')),
                ('status', models.SmallIntegerField(default=0, verbose_name='商品状态')),
                ('statusStr', models.CharField(max_length=10, verbose_name='商品状态(文字)')),
                ('stores', models.IntegerField(verbose_name='库存')),
                ('user_id', models.IntegerField(default=0)),
                ('video_id', models.IntegerField(default=0)),
                ('views', models.IntegerField(default=0)),
                ('weight', models.FloatField(default=0.0)),
                ('category_id', models.ForeignKey(default=0, on_delete=django.db.models.deletion.SET_DEFAULT, to='wx_league.Category')),
            ],
        ),
        migrations.CreateModel(
            name='Icon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_pic', models.ImageField(upload_to='img', verbose_name='icon 对应')),
            ],
            options={
                'db_table': 'Icon',
            },
        ),
        migrations.CreateModel(
            name='Logistics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='名称')),
                ('by_self', models.BooleanField(default=False, verbose_name='商家配送')),
                ('free', models.BooleanField(default=False, verbose_name='是否包邮')),
                ('valuation_type', models.SmallIntegerField(default=0, verbose_name='计价方式')),
            ],
            options={
                'db_table': 'Logistics',
            },
        ),
        migrations.CreateModel(
            name='ModifyPriceWizard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total', models.FloatField(verbose_name='金额')),
            ],
            options={
                'db_table': 'ModifyPriceWizard',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_num', models.BigIntegerField(verbose_name='订单号')),
                ('number_goods', models.IntegerField(verbose_name='商品数量')),
                ('goods_price', models.FloatField(default=0, verbose_name='商品总金额')),
                ('logistics_price', models.FloatField(default=0, verbose_name='物流费用')),
                ('total', models.FloatField(default=0, verbose_name='实际支付')),
                ('status', models.SmallIntegerField(verbose_name='状态')),
                ('remark', models.CharField(max_length=100, verbose_name='备注')),
                ('linkman', models.CharField(max_length=100, verbose_name='联系人')),
                ('phone', models.CharField(max_length=50, verbose_name='手机号码')),
                ('province_id', models.SmallIntegerField(verbose_name='省')),
                ('city_id', models.SmallIntegerField(verbose_name='市')),
                ('district_id', models.SmallIntegerField(verbose_name='区')),
                ('address', models.CharField(max_length=100, verbose_name='详细地址')),
                ('postcode', models.CharField(max_length=20, verbose_name='邮政编码')),
                ('tracking_number', models.CharField(max_length=200, verbose_name='运单号')),
                ('traces', models.TextField(verbose_name='物流信息')),
            ],
            options={
                'db_table': 'Order',
            },
        ),
        migrations.CreateModel(
            name='OrderGoods',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goods_id', models.IntegerField(verbose_name='商品id')),
                ('name', models.CharField(max_length=50, verbose_name='商品名称')),
                ('display_pic', models.ImageField(upload_to='', verbose_name='图片')),
                ('property_str', models.CharField(max_length=200, verbose_name='商品规格')),
                ('price', models.FloatField(verbose_name='单价')),
                ('amount', models.IntegerField(verbose_name='商品数量')),
                ('total', models.FloatField(verbose_name='总价')),
                ('order_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wx_league.Order', verbose_name='订单')),
                ('pic', models.ForeignKey(default=0, on_delete=django.db.models.deletion.SET_DEFAULT, to='wx_league.Icon', verbose_name='图片')),
            ],
            options={
                'db_table': 'OrderGoods',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_number', models.CharField(max_length=255, verbose_name='支付单号')),
                ('price', models.FloatField(verbose_name='支付金额(元)')),
                ('status', models.SmallIntegerField(default=0, verbose_name='状态')),
                ('openid', models.CharField(max_length=255, verbose_name='openid')),
                ('result_code', models.CharField(max_length=30, verbose_name='业务结果')),
                ('err_code', models.CharField(max_length=40, verbose_name='错误代码')),
                ('err_code_des', models.CharField(max_length=255, verbose_name='错误代码描述')),
                ('transaction_id', models.CharField(max_length=255, verbose_name='微信订单号')),
                ('bank_type', models.CharField(max_length=50, verbose_name='付款银行')),
                ('fee_type', models.CharField(max_length=20, verbose_name='货币种类')),
                ('total_fee', models.FloatField(verbose_name='订单金额(分)')),
                ('settlement_total_fee', models.FloatField(verbose_name='应结订单金额(分)')),
                ('cash_fee', models.FloatField(verbose_name='现金支付金额')),
                ('cash_fee_type', models.CharField(max_length=40, verbose_name='现金支付货币类型')),
                ('coupon_fee', models.FloatField(verbose_name='代金券金额(分)')),
                ('coupon_count', models.IntegerField(verbose_name='代金券使用数量')),
                ('order_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wx_league.Order', verbose_name='订单')),
                ('wechat_user_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='微信用户')),
            ],
            options={
                'db_table': 'Payment',
            },
        ),
        migrations.CreateModel(
            name='Shipper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='名称')),
                ('code', models.CharField(max_length=100, verbose_name='编码')),
            ],
            options={
                'db_table': 'Shipper',
            },
        ),
        migrations.AddField(
            model_name='order',
            name='shipper_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx_league.Shipper', verbose_name='快递承运商'),
        ),
        migrations.AddField(
            model_name='order',
            name='wechat_user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL, verbose_name='微信用户'),
        ),
        migrations.AddField(
            model_name='modifypricewizard',
            name='order_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wx_league.Order', verbose_name='订单'),
        ),
        migrations.AddField(
            model_name='goods',
            name='pic',
            field=models.ForeignKey(default=0, on_delete=django.db.models.deletion.SET_DEFAULT, to='wx_league.Icon', verbose_name='商品图片连接'),
        ),
        migrations.AddField(
            model_name='goods',
            name='shop_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wx_league.DriverSchool', verbose_name='商店id'),
        ),
        migrations.AddField(
            model_name='driverschool',
            name='pic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='wx_league.Icon', verbose_name='驾校商标'),
        ),
        migrations.AddField(
            model_name='deliverwizard',
            name='order_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wx_league.Order', verbose_name='订单'),
        ),
        migrations.AddField(
            model_name='deliverwizard',
            name='shipper_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wx_league.Shipper', verbose_name='快递承运商'),
        ),
        migrations.AddField(
            model_name='coupons',
            name='goods_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wx_league.goods', verbose_name='商品id'),
        ),
        migrations.AddField(
            model_name='category',
            name='icon',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wx_league.Icon', verbose_name='图标'),
        ),
        migrations.AddField(
            model_name='category',
            name='pid',
            field=models.ForeignKey(default=0, on_delete=django.db.models.deletion.SET_DEFAULT, to='wx_league.Category', verbose_name='上级分类'),
        ),
    ]
